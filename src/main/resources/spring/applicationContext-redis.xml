<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--<context:property-placeholder location="classpath:redis.properties"/>-->

    <!-- 引入数据库配置文件 -->
    <!--   <bean id="propertyConfigurer"
             class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
           <property name="locations">
               <list>
                   &lt;!&ndash;<value>classpath:jdbc.properties</value>&ndash;&gt;
                   <value>classpath:redis.properties</value>
               </list>
           </property>
       </bean>-->

    <!--<context:component-scan base-package="com.rk.common.cache"/>-->

    <!-- redis数据源 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 每次释放连接的最大数目 -->
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <!-- 释放连接的扫描间隔（毫秒） -->
        <property name="maxTotal" value="${redis.maxActive}"/>
        <!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 -->
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        <!-- 在获取连接的时候检查有效性, 默认false -->
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
        <!--

                &lt;!&ndash; 每次释放连接的最大数目 &ndash;&gt;
                <property  name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}"/>
                &lt;!&ndash; 释放连接的扫描间隔（毫秒） &ndash;&gt;
                <property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}"/>
                &lt;!&ndash; 连接最小空闲时间 &ndash;&gt;
                <property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}"/>
                &lt;!&ndash; 连接空闲多久后释放, 当空闲时间>该值且空闲连接>最大空闲连接数时直接释放 &ndash;&gt;
                <property name="softMinEvictableIdleTimeMillis" value="10000"/>
                &lt;!&ndash; 在空闲时检查有效性, 默认false &ndash;&gt;
                <property name="testWhileIdle" value="${redis.testWhileIdle}"/>
                &lt;!&ndash; 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true &ndash;&gt;
                <property name="blockWhenExhausted" value="${redis.blockWhenExhausted}"/>
        -->

    </bean>

    <!-- Spring-redis连接池管理工厂 -->
    <bean id="jedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:host-name="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}"
          p:database="${redis.database4mybatis}"
          p:pool-config-ref="poolConfig">
    </bean>
    <!-- 使用中间类解决RedisCache.jedisConnectionFactory的静态注入，从而使MyBatis实现第三方缓存 -->
    <bean id="redisCacheTransfer" class="com.rk.common.cache.MybatisRedisCacheTransfer">
        <property name="jedisConnectionFactory" ref="jedisConnectionFactory"/>
    </bean>

    <bean id="jedisPool4Cache" class="redis.clients.jedis.JedisPool">
        <constructor-arg name="poolConfig" ref="poolConfig"/>
        <constructor-arg name="host" value="${redis.host}"/>
        <constructor-arg name="port" value="${redis.port}" type="int"/>
        <constructor-arg name="timeout" value="${redis.timeOut}" type="int"/>
        <constructor-arg name="password" value="${redis.pass}"/>
        <constructor-arg name="database" value="${redis.database4cache}" type="int"/>
    </bean>

    <bean id="cache" class="com.rk.common.cache.RedisCache">
        <constructor-arg name="jedisPool" ref="jedisPool4Cache"/>
    </bean>
</beans>