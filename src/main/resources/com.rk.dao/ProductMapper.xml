<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rk.dao.ProductMapper">
    <!--使用redis做为二级缓存-->
    <cache eviction="LRU" type="com.rk.common.cache.MybatisRedisCache"/>
    <resultMap id="BaseResultMap" type="com.rk.entity.Product">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="typeId" property="typeId" jdbcType="INTEGER"/>
        <!--<result property="name" column="name" javaType="String" jdbcType="VARCHAR"/>-->
        <!--<result property="number" column="number" javaType="Integer" jdbcType="VARCHAR"/>-->
        <!--<result property="startTime" column="start_time" javaType="java.time.LocalDateTime" jdbcType="TIMESTAMP"/>-->
        <!--<result property="endTime" column="end_time" javaType="java.time.LocalDateTime" jdbcType="TIMESTAMP"/>-->
        <!--<result property="createTIme" column="create_time" javaType="java.time.LocalDateTime" jdbcType="TIMESTAMP"/>-->
        <association property="productType" column="typeId" javaType="com.rk.entity.ProductType"
                     select="com.rk.dao.ProductTypeMapper.getByPrimaryKey"></association>
        <!-- 一对多关联映射：collection -->
        <collection property="productItems" column="id" select="getProductItems" ofType="com.rk.entity.ProductItem" javaType="java.util.ArrayList">
            <id property="id" column="id" />
            <result property="itemName" column="itemName" />
            <result property="itemCode" column="itemCode" />
            <result property="itemInfo" column="itemInfo" />
            <result property="image" column="image" />
            <result property="productId" column="productId" />
        </collection>
    </resultMap>

    <select id="getByPrimaryKey" resultMap="BaseResultMap">
        SELECT * FROM product WHERE id = #{id}
    </select>
    
    <select id="getProductItems" resultType="com.rk.entity.ProductItem">
        SELECT * FROM product_item WHERE productId = #{id}
    </select>

    <sql id="pageWhere">
        <where>
            <![CDATA[status <> -1]]>
            <if test="queryString != null and queryString != ''">
                <!--AND name LIKE #{queryStringPattern}-->
                AND name LIKE CONCAT('%', #{queryString}, '%')
            </if>
            <if test="minPrice != null">
                AND <![CDATA[price >= #{minPrice}]]>
            </if>
            <if test="maxPrice != null">
                AND <![CDATA[price <= #{maxPrice}]]>
            </if>
            <if test="originPlace != null and originPlace != ''">
                AND originPlace = #{originPlace}>
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
        </where>
    </sql>

    <select id="getPageList" resultMap="BaseResultMap">
        <!--<bind name="queryStringPattern" value="'%' + queryString + '%'"></bind>-->
        <bind name="offest" value="(page-1)*limit"></bind>
        SELECT * FROM product
        <include refid="pageWhere"></include>
        ORDER BY id LIMIT #{offest}, #{limit}
    </select>

    <select id="getPageListTotalCount" resultType="int">
        <!--<bind name="queryStringPattern" value="'%' + queryString + '%'"></bind>-->
        SELECT count(*) FROM product
        <include refid="pageWhere"></include>
    </select>

    <insert id="insert">
        INSERT INTO product (
            name,
            image,
            originPlace,
            description,
            price,
            oldPrice,
            count,
            limitCount,
            typeId,
            createDate,
            status
        )
        VALUES
        (
            #{name},
            #{image},
            #{originPlace},
            #{description},
            #{price},
            #{oldPrice},
            #{count},
            #{limitCount},
            #{typeId},
            #{createDate},
            #{status}
        )
    </insert>

    <update id="update">
        UPDATE product
        <set>
            name = #{name},
            <if test="image != null">
                image = #{image},
            </if>
            originPlace = #{originPlace},
            description = #{description},
            price = #{price},
            oldPrice = #{oldPrice},
            count = #{count},
            limitCount = #{limitCount},
            typeId = #{typeId},
            modifyDate = #{modifyDate},
            status = #{status}
        </set>
        WHERE
        id = #{id}

    </update>

    <delete id="delete">
        <choose>
            <when test="null != array and array.length > 1">
                DELETE FROM product WHERE id IN
                <foreach collection="array" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </when>
            <otherwise>
                DELETE FROM product WHERE id = #{array[0]}
            </otherwise>
        </choose>
    </delete>

    <update id="logicalDelete">
        <choose>
            <when test="null != array and array.length > 1">
                UPDATE product SET status = -1 WHERE id IN
                <foreach collection="array" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </when>
            <otherwise>
                UPDATE product SET status = -1 WHERE id = #{array[0]}
            </otherwise>
        </choose>
    </update>

    <select id="getByTypeIds" resultType="java.lang.Integer">
        SELECT typeId FROM product WHERE <![CDATA[status <> -1]]> AND typeId IN
        <foreach collection="array" item="item" index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        GROUP BY typeId
    </select>
</mapper>